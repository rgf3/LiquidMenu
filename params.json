{
  "name": "LiquidMenu",
  "tagline": "Menu creation Arduino library for LCDs, extends LiquidCrystal.",
  "body": "![logo](https://raw.githubusercontent.com/VasilKalchev/LiquidMenu/master/doc/logo.png)\r\n\r\n*Menu creation Arduino library for LCDs, extends [LiquidCrystal][lc].*\r\n\r\n[![Build Status](https://travis-ci.org/VasilKalchev/LiquidMenu.svg?branch=master)](https://travis-ci.org/VasilKalchev/LiquidMenu)\r\n[![release](https://img.shields.io/badge/release-1.1.6-yellow.svg)](https://github.com/VasilKalchev/LiquidMenu/releases)\r\n[![documentation](https://img.shields.io/badge/docs-doxygen-green.svg)](https://vasilkalchev.github.io/LiquidMenu/doc/html/index.html)\r\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://opensource.org/licenses/mit-license.php)\r\n\r\n\r\n**LiquidMenu** extends the Arduino's [LiquidCrystal][lc] library with the ability to create menus.\r\nIt simplifies the menu creation process by abstracting the elements of a menu into hierarchically organized classes.\r\n\r\n\r\nFeatures\r\n========\r\n - Fast and easy menu creation.\r\n - Selectable menu items.\r\n - Callback functions.\r\n\r\n\r\nRequirements\r\n============\r\n - The Arduino's [LiquidCrystal][lc] library.\r\n - LCD supported by <a href=\"https://github.com/arduino/Arduino/tree/master/libraries/LiquidCrystal\"> LiquidCrystal</a> (*with Hitachi HD44780 or a compatible chipset*).\r\n - Arduino board or a compatible microcontroller.\r\n - Input device is recommended (*buttons, rotary encoder, etc.*).\r\n\r\n\r\nQuick start\r\n===========\r\n\r\n### Classes organization\r\nThe library uses hierarchically structured classes to represent the different elements of a menu.\r\n\r\n*Basic class hierarchy diagram:*\r\n\r\n![Basic class hierarchy diagram](https://raw.githubusercontent.com/VasilKalchev/LiquidMenu/master/doc/basic_diagram.png \"Basic class hierarchy diagram\")\r\n\r\n*Click [here](https://raw.githubusercontent.com/VasilKalchev/LiquidMenu/master/doc/diagram.png) for a complete hierarchy diagram.*\r\n\r\nThe **LiquidLine** class represents a **line** of text/numbers on the display.\r\nTo create a new **LiquidLine** object use its constructor:\r\n\r\nThe **LiquidScreen** class represents a collection of **lines** that are shown together at the same time on the display (*i.e. \"the current screen\"*).\r\n\r\nThe **LiquidMenu** class combines the **screens** to form a **menu**. This class is used for controlling the **menu** (_switching **screens**, selecting **lines**, calling functions etc._).\r\n\r\nThe **LiquidSystem** is an optional class that combines **menus** to form a **menu system** (*e.g. Main menu, Settings, etc.*). It has the same public interface as **LiquidMenu**.\r\n\r\n\r\n### Creating a menu\r\nMenu creation is all about structure. First there are variables/constants that go into the **LiquidLine** objects. Then the **LiquidLine** objects go into the **LiquidScreen** objects. Then **LiquidScreen** objects go into the **LiquidMenu** object/s. And optionally the **LiquidMenu** objects go into the **LiquidSystem** object.\r\nThis structure can be established on object instantiation or later with the classes' public methods:\r\n```c++\r\n// Takes column and row for the position and 1 to 4 variable references. These variable\r\n// references are what is going to be printed on the display. They can be integers used\r\n// in the program, string literals passed direrctly or a char* for changing text.\r\nLiquidLine(byte column, byte row, A &variableA...);\r\n\r\n// Takes 0 to 4 LiquidLine objects.\r\nLiquidScreen(LiquidLine &liquidLine1...);\r\n\r\n// Takes a reference to the LiquidCrystal object, 0 to 4 LiquidScreen objects and\r\n// the number of the screen that will be shown first.\r\nLiquidMenu(LiquidCrystal &liquidCrystal, LiquidScreen &liquidScreen1..., byte startingScreen = 1);\r\n\r\n// Takes 0 to 4 LiquidMenu objects and the number of the menu that will be shown first.\r\nLiquidSystem(LiquidMenu &liquidMenu1..., byte startingMenu = 1);\r\n```\r\n\r\n### Navigating the menu\r\nThe menu is navigated from the **LiquidMenu** object or if there are multiple menus - the **LiquidSystem** object. The **screens** can by cycled forward and backward or a specific **screen** can be specified by its object or number.\r\n\r\n```c++\r\nvoid LiquidMenu::next_screen();\r\nvoid LiquidMenu::previous_screen();\r\nbool LiquidMenu::change_screen(LiquidScreen &liquidScreen);\r\n```\r\n\r\n### Focus and callback functions\r\nThe **lines** of text/numbers shown on the display can be interactive. Every line can have callback functions attached to it (*up to 8 by default*). They are attached with a number specified by the user.\r\n```c++\r\nbool LiquidLine::attach_function(byte number, void (*function)(void));\r\n```\r\nTo call a **line's** attached function, the **line** needs to be **focused** (*selected*). To cycle the **focus** through the **lines** shown on the **screen** use:\r\n```c++\r\nvoid LiquidMenu::switch_focus(bool forward = true);\r\n```\r\nWhen the **line** is selected one of its attached functions can be called with:\r\n```c++\r\nvoid LiquidMenu::call_function(byte number);\r\n```\r\nThe `number` specifies which one of the attached functions should be called.\r\n\r\n_Similar functions can be attached under the same number to different **lines** and then called on a similar events. For example if we are printing on the display the state of four LEDs. The four LEDs are instantiated in four **LiquidLine** objects with their name and their state. The functions used to turn them on can be attached under number 1 and the functions for turning them off - under number 2. Then if we have 3 buttons, one can be used to switch the focus, the second (say 'UP') button can be used to call function 1 and the third (say 'DOWN') button can be used to call function 2._\r\n\r\n\r\n### Basic example\r\n```c++\r\n...\r\n// First we need to instantiate the LiquidCrystal object.\r\nLiquidCrystal lcd(LCD_RS, LCD_E, LCD_D4, LCD_D5, LCD_D6, LCD_D7);\r\n\r\n// ----- WELCOME SCREEN -----\r\n/// Instantiating a line with one string literal.\r\nLiquidLine welcome_line1(1, 0, \"Hello Menu\");\r\n\r\n/// Instantiating a line with an integer variable.\r\nbyte oneTwoThree = 123;\r\nLiquidLine welcome_line2(2, 1, oneTwoThree);\r\n\r\n/// Forming a screen from the above two lines.\r\nLiquidScreen welcome_screen(welcome_line1, welcome_line2);\r\n// --------------------------\r\n\r\n// ----- SCREEN 2 -----\r\nLiquidLine some_line(0, 0, \"Some line\");\r\nLiquidScreen some_screen(some_line);\r\n// --------------------\r\n\r\n// Now let's combine the screens into a menu.\r\nLiquidMenu my_menu(lcd, welcome_screen, some_screen);\r\n\r\nvoid setup() {\r\n    lcd.begin(16, 2);\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    if (rightButton) {\r\n        my_menu.next_screen();\r\n    }\r\n    if (leftButton) {\r\n        my_menu.previous_screen();\r\n    }\r\n    if (somethingElse) {\r\n        oneTwoThree++;\r\n        my_menu.update;\r\n    }\r\n    ...\r\n}\r\n\r\n```\r\n\r\n\r\nMore information\r\n================\r\n[Documentation][docs_home]\r\n\r\n[More examples][docs_examples]\r\n\r\n\r\nLicense\r\n=======\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 Vasil Kalchev\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\n[lc]: https://github.com/arduino-libraries/LiquidCrystal\r\n[docs_home]: https://vasilkalchev.github.io/LiquidMenu/doc/html/index.html\r\n[docs_classes]: https://vasilkalchev.github.io/LiquidMenu/doc/html/annotated.html\r\n[docs_examples]: https://vasilkalchev.github.io/LiquidMenu/doc/html/examples.html\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}